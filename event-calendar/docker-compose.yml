services:

  # web service, frontend and backend included
  web:
    build: .  # build the docker, using the dockfile in current dir
    # command: python manage.py runserver 0.0.0.0:8000
    ports:
      - "8000:8000"
    volumes:
      - .:C:\eventcalendar  # mount the project dir to the docker
    environment:
      - DJANGO_DEV_SERVER_PORT=8000
      - SERVICE_TYPE=django
    entrypoint: ["powershell", "-NoLogo", "-NoProfile", "-ExecutionPolicy", "Bypass","-File", "C:\\eventcalendar\\entrypoint.ps1"]
    # networks:
    #   - app-network

  websocket:
    build: .
    ports:
      - "5000:5000"
    volumes:
      - .:C:\eventcalendar
    environment:
      - SERVICE_TYPE=websocket
    entrypoint: ["powershell","-NoLogo", "-NoProfile", "-ExecutionPolicy", "Bypass", "-File", "C:\\eventcalendar\\entrypoint.ps1"]
    # networks:
    #   - app-network

  chatbot:
    build: .
    ports:
      - "8001:8001"
    volumes:
      - .:C:\eventcalendar
    environment:
      - SERVICE_TYPE=chatbot
    entrypoint: ["powershell","-NoLogo", "-NoProfile", "-ExecutionPolicy", "Bypass", "-File", "C:\\eventcalendar\\entrypoint.ps1"]
    # networks:
    #   - app-network

# networks:
#   app-network:
#     driver: nat
#     driver_opts:
#       com.docker.network.windowsshim.dnsservers: "8.8.8.8,8.8.4.4"

  # db:
  #   image: postgres:latest

  #   environment:
  #     POSTGRES_DB: calendar_db
  #     POSTGRES_USER: user
  #     POSTGRES_PASSWORD: "!!UZH_CNSP24_CALENDAR!!"

  #   ports:
  #     - "5432:5432"

  #   volumes:
  #     - db_data:/var/lib/postgresql/data  # pesistantly store the data even when the docker is deleted or stopped